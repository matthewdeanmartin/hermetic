# scripts/build_bootstrap.py
"""
Build script to generate the hermetic/bootstrap.py file.

This script reads bootstrap-specific code snippets from each guard module
in hermetic/guards/ and assembles them into a single, self-contained
`sitecustomize.py` string within the final hermetic/bootstrap.py module.

This avoids code duplication and ensures that the bootstrap logic is always
in sync with the guard modules, which are the single source of truth.

To run: `python scripts/build_bootstrap.py` from the project root.
"""
import os
import sys
from textwrap import dedent

# Add project root to the path to allow importing 'hermetic'
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, PROJECT_ROOT)

from hermetic.guards import (
    filesystem,
    imports_guard,
    network,
    subprocess_guard,
)

# Template for the final bootstrap.py file
# The {guards_code} placeholder will be filled with the concatenated
# bootstrap code from each guard module.
BOOTSTRAP_PY_TEMPLATE = r"""# hermetic/bootstrap.py
# WARNING: THIS FILE IS AUTO-GENERATED BY scripts/build_bootstrap.py. DO NOT EDIT.
from __future__ import annotations
import json
import os
import tempfile
from textwrap import dedent
from typing import Dict, Any
from .errors import BootstrapError

# Minimal bootstrap sitecustomize that installs guards without requiring hermetic package to be importable.
# Encodes guards inline to survive foreign interpreters/venvs.

_SITE_CUSTOMIZE = dedent(
    r'''
    # --- BOOTSTRAP START ---
    import os, sys, json, socket, ssl, subprocess, asyncio, builtins, importlib.machinery as mach, pathlib, time, errno

    class _HPolicy(RuntimeError): pass

    # policy-aware excepthook so bootstrap exits cleanly on guard violations
    _orig_excepthook = sys.excepthook
    def _hermetic_excepthook(exctype, value, tb):
        # Donâ€™t intercept KeyboardInterrupt
        if exctype is KeyboardInterrupt:
            return _orig_excepthook(exctype, value, tb)
        # Our policy exceptions get a clean, consistent exit
        if exctype.__name__ in {{"_HPolicy", "PolicyViolation"}}:
            try:
                sys.stderr.write(f"hermetic: blocked action: {{value}}\n")
                sys.stderr.flush()
            finally:
                os._exit(2)  # hard-exit: no teardown that might deadlock
        # otherwise, default behavior
        return _orig_excepthook(exctype, value, tb)

    sys.excepthook = _hermetic_excepthook

    cfg = json.loads(os.environ.pop("HERMETIC_FLAGS_JSON", "{{}}"))
    trace = bool(cfg.get("trace"))
    def _tr(msg):
        if trace:
            print(f"[hermetic] {{msg}}", file=sys.stderr, flush=True)

    # --- GUARDS START ---
{guards_code}
    # --- GUARDS END ---
    # --- BOOTSTRAP END ---
    '''
)

def write_sitecustomize(flags: Dict[str, Any]) -> str:
    try:
        d = tempfile.mkdtemp(prefix="hermetic_site_")
        path = os.path.join(d, "sitecustomize.py")
        with open(path, "w", encoding="utf-8") as f:
            f.write(_SITE_CUSTOMIZE)
        os.environ["HERMETIC_FLAGS_JSON"] = json.dumps(flags)
        return d
    except Exception as e:
        raise BootstrapError(f"failed to write sitecustomize: {{e}}")
"""


def main():
    """Generates and writes the hermetic/bootstrap.py file."""
    print("Gathering bootstrap code from guard modules...")

    # Order matters for clarity in the generated file
    guard_modules = [
        network,
        subprocess_guard,
        filesystem,
        imports_guard,
    ]

    # Concatenate the bootstrap code from all guard modules
    all_guards_code = "\n".join(
        mod.BOOTSTRAP_CODE for mod in guard_modules
    )

    # Indent the guard code to fit into the sitecustomize template
    indented_guards_code = "\n".join(
        f"    {line}" for line in all_guards_code.splitlines()
    ).strip()

    print("Generating hermetic/bootstrap.py...")
    final_content = BOOTSTRAP_PY_TEMPLATE.format(
        guards_code=indented_guards_code
    )

    output_path = os.path.join(PROJECT_ROOT, "hermetic", "bootstrap.py")
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(final_content)

    print(f"Successfully wrote generated file to {output_path}")
    return 0


if __name__ == "__main__":
    sys.exit(main())

